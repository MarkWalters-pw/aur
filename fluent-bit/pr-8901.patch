From 33690ee3fd6ad97f3f1917a1a91bd4c4f1f235d6 Mon Sep 17 00:00:00 2001
From: javex <florian.ruechel@inexplicity.de>
Date: Fri, 31 May 2024 21:25:38 +0930
Subject: [PATCH 1/2] tls: Type cast explicitly for OpenSSL

With the release of GCC 14.1, some previous warnings are now errors,
including the SSL_select_next_proto call in
tls_context_server_alpn_select_callback. To fix the build, add
explicitly type cast.

Signed-off-by: javex <florian.ruechel@inexplicity.de>
---
 src/tls/openssl.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/tls/openssl.c b/src/tls/openssl.c
index 14b77e09c6a..03aeb9610b7 100644
--- a/src/tls/openssl.c
+++ b/src/tls/openssl.c
@@ -217,7 +217,7 @@ static int tls_context_server_alpn_select_callback(SSL *ssl,
     result = SSL_TLSEXT_ERR_NOACK;
 
     if (ctx->alpn != NULL) {
-        result = SSL_select_next_proto(out, 
+        result = SSL_select_next_proto((unsigned char **) out,
                                        outlen,
                                        &ctx->alpn[1], 
                                        (unsigned int) ctx->alpn[0], 

From 944bb0ce680c6f92c20fddfb7442a19e4cfe0a36 Mon Sep 17 00:00:00 2001
From: javex <florian.ruechel@inexplicity.de>
Date: Fri, 31 May 2024 21:27:57 +0930
Subject: [PATCH 2/2] in_kubernetes_events: Type cast explicitly

With the release of GCC 14.1, some previous warnings are now errors,
including the check_event_is_filtered call in
process_events. To fix the build, add explicitly type cast.

Signed-off-by: javex <florian.ruechel@inexplicity.de>
---
 plugins/in_kubernetes_events/kubernetes_events.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/plugins/in_kubernetes_events/kubernetes_events.c b/plugins/in_kubernetes_events/kubernetes_events.c
index 6231becb0ad..22a69b65af4 100644
--- a/plugins/in_kubernetes_events/kubernetes_events.c
+++ b/plugins/in_kubernetes_events/kubernetes_events.c
@@ -487,7 +487,7 @@ static int process_events(struct k8s_events *ctx, char *in_data, size_t in_size,
             goto msg_error;
         }
 
-        if (check_event_is_filtered(ctx, item, &ts) == FLB_TRUE) {
+        if (check_event_is_filtered(ctx, item, (time_t *) &ts) == FLB_TRUE) {
             continue;
         }
 
